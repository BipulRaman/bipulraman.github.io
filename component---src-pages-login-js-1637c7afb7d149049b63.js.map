{"version":3,"sources":["webpack://bipul-raman/./src/components/DisplayError.js","webpack://bipul-raman/./src/components/DisplayLoading.js","webpack://bipul-raman/./src/pages/login.js","webpack://bipul-raman/./src/configs/APIConfig.js","webpack://bipul-raman/./src/services/BlogService.js"],"names":["DisplayError","error","variant","DisplayLoading","useStyles","makeStyles","root","margin","padding","LoginPage","classes","accounts","useMsal","account","useAccount","authRequest","useState","isAPIActive","setIsAPIActive","useEffect","GetSiteConfig","response","elevation","className","interactionType","InteractionType","authenticationRequest","errorComponent","loadingComponent","paragraph","sectionTitle","Title","LoginPageMetadata","Description","BlogAPIEndpoint","AzStorageRestAPI","headers","bearer","requestOptions","method","body","formData","fetch","console","accessToken"],"mappings":"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","file":"component---src-pages-login-js-1637c7afb7d149049b63.js","sourcesContent":["import React from \"react\";\nimport { Typography } from \"@material-ui/core\";\n\nexport const DisplayError = ({error}) => {\n    return <Typography variant=\"h6\">An Error Occurred: {error.errorCode}</Typography>;\n}","import React from \"react\";\nimport { Typography } from \"@material-ui/core\";\n\nexport const DisplayLoading = () => {\n    return <Typography variant=\"h6\">Authentication in progress...</Typography>\n}","import React, { useEffect, useState } from \"react\";\nimport { Typography, Paper } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useMsal, useAccount } from \"@azure/msal-react\";\nimport { MsalAuthenticationTemplate } from \"@azure/msal-react\";\nimport { AuthenticatedTemplate } from \"@azure/msal-react\";\nimport { InteractionType } from \"@azure/msal-browser\";\nimport Metadata from 'components/Metadata';\nimport { LoginPageMetadata } from 'configs/PageMetadata';\nimport Layout from 'layout/Layout';\nimport { loginRequest } from \"configs/AuthConfig\";\nimport { DisplayLoading } from \"components/DisplayLoading\";\nimport { DisplayError } from \"components/DisplayError\";\nimport { GetSiteConfig } from \"services/BlogService\";\n\n\nconst useStyles = makeStyles(() => ({\n    root: {\n        margin: 20,\n        padding: 20\n    }\n}));\n\n\nexport default function LoginPage() {\n    const classes = useStyles();\n    const { accounts } = useMsal();\n    const account = useAccount(accounts[0] || {});\n    const authRequest = {\n        ...loginRequest\n    };\n    const [isAPIActive, setIsAPIActive] = useState(false);\n\n    useEffect(() => {\n        GetSiteConfig()\n            .then((response) => {\n                if (response !== undefined) {                    \n                    setIsAPIActive(true);\n                }\n            });\n    }, []);\n\n    return (\n        <Layout>\n            <Paper elevation={3} className={classes.root} >\n                <MsalAuthenticationTemplate\n                    interactionType={InteractionType.Redirect}\n                    authenticationRequest={authRequest}\n                    errorComponent={DisplayError}\n                    loadingComponent={DisplayLoading}\n                >\n                    <AuthenticatedTemplate>\n                        { account &&\n                            <Typography variant=\"h6\">\n                                Welcome {account.name}! You are successfully logged-in.\n                            </Typography>\n                        }\n                    </AuthenticatedTemplate>\n\n                </MsalAuthenticationTemplate>\n            </Paper>\n            { isAPIActive == true ?\n                <Paper elevation={3} className={classes.root}>\n                    <Typography paragraph className={classes.sectionTitle}>\n                        Blog Creation API is active now.\n                    </Typography>\n                </Paper>\n                :\n\n                <Paper elevation={3} className={classes.root}>\n                    <Typography paragraph className={classes.sectionTitle}>\n                    Blog Creation API is not active right now.\n                    </Typography>\n                </Paper>\n\n            }\n            <Metadata\n                Title={LoginPageMetadata.Title}\n                Description={LoginPageMetadata.Description}\n            />\n        </Layout>\n    );\n}\n","export const graphConfig = {\n    graphMeEndpoint: \"https://graph.microsoft.com/v1.0/me\"\n};\n\nexport const BlogAPIEndpoint = {\n    Create: \"https://bipulappapi.azurewebsites.net/api/BlogCreate\",\n    CreateNew: \"https://bipulappapi.azurewebsites.net/api/BlogNew\",\n    Delete: \"https://bipulappapi.azurewebsites.net/api/BlogDelete\",\n    GetOneBlog: \"https://bipulapppublicapi.azurewebsites.net/api/Blog\",\n    GetBlogs: \"https://bipulapppublicapi.azurewebsites.net/api/Blogs\",\n    GetSiteConfig: \"https://bipulapppublicapi.azurewebsites.net/api/SiteConfig\"\n};\n\nexport const AzStorageRestAPI = {\n    GetOneBlog: \"https://bipulappstorage.table.core.windows.net/Blogs?sv=2018-03-28&si=ViewBlogs&tn=blogs&sig=mPxjbfPbdqcc3PA%2BNhomdaUkkNAv%2BTUyu8lXC%2Fc2%2FVY%3D\",\n    GetBlogs: \"https://bipulappstorage.table.core.windows.net/Blogs?sv=2018-03-28&si=ViewBlogs&tn=blogs&sig=mPxjbfPbdqcc3PA%2BNhomdaUkkNAv%2BTUyu8lXC%2Fc2%2FVY%3D&$top=5\",\n    GetSiteConfig: \"https://bipulappstorage.table.core.windows.net/Config?sv=2018-03-28&si=ViewConfig&tn=config&sig=xcIl81rzfecn2QMunp5hG4VTp7BzTB4PRLWmSM1Y9Fc%3D\"\n};\n\nexport const BlogAPIEndpoint1 = {\n    Create: \"http://localhost:7071/api/BlogCreate\",\n    CreateNew: \"http://localhost:7071/api/BlogNew\",\n    Delete: \"http://localhost:7071/api/BlogDelete\",\n    GetById: \"http://localhost:7071/api/BlogGetById\"\n};","import { BlogAPIEndpoint, AzStorageRestAPI  } from \"configs/APIConfig\";\n\nexport async function BlogCreate(accessToken, data) {\n    const headers = new Headers();\n    const bearer = `Bearer ${accessToken}`;\n\n    headers.append(\"Authorization\", bearer);\n    headers.append(\"Access-Control-Allow-Origin\", \"*\");\n    headers.append(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\");\n    headers.append(\"Content-Type\", \"application/json\");\n    \n    const requestOptions = {\n        method: \"POST\",\n        headers: headers,\n        body: JSON.stringify(data)\n    };\n\n    return fetch(BlogAPIEndpoint.Create, requestOptions)\n        .then(response => response.json())\n        .catch(error => console.log(error));\n}\n\nexport async function BlogNew(accessToken, formData) {\n    const headers = new Headers();\n    const bearer = `Bearer ${accessToken}`;\n\n    headers.append(\"Authorization\", bearer);\n    headers.append(\"Access-Control-Allow-Origin\", \"*\");\n    headers.append(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept\");\n    \n    const requestOptions = {\n        method: \"POST\",\n        headers: headers,\n        body: formData\n    };\n\n    return fetch(BlogAPIEndpoint.CreateNew, requestOptions)\n        .then(response => response.json())\n        .catch(error => console.log(error));\n}\n\nexport async function BlogDelete(accessToken, blogId) {\n    \n    const requestOptions = {\n        method: 'DELETE',\n        headers: { \n            \"Access-Control-Allow-Origin\": \"*\",\n            \"Access-Control-Allow-Headers\": \"Origin, X-Requested-With, Content-Type, Accept\",\n            'Authorization': 'Bearer ' + accessToken\n        }\n    };\n\n    return fetch(BlogAPIEndpoint.Delete + '/' + blogId, requestOptions)\n        .then(response => response.json())\n        .catch(error => console.log(error));\n}\n\nexport async function BlogGetById(blogId) {\n    \n    const requestOptions = {\n        method: 'GET',\n        headers: { \n            \"Access-Control-Allow-Origin\": \"*\",\n            \"Access-Control-Allow-Headers\": \"Origin, X-Requested-With, Content-Type, Accept\",\n            'Content-Type': 'application/json'\n        }\n    };\n\n    return fetch(BlogAPIEndpoint.GetOneBlog + '/' + blogId, requestOptions)\n        .then(response => response.json())\n        .catch(error => console.log(error));\n}\n\nexport async function BlogGetAll(skipCount) {\n    \n    const requestOptions = {\n        method: 'GET',\n        headers: { \n            \"Access-Control-Allow-Origin\": \"*\",\n            \"Access-Control-Allow-Headers\": \"Origin, X-Requested-With, Content-Type, Accept\",\n            'Content-Type': 'application/json'\n        }\n    };\n\n    return fetch(BlogAPIEndpoint.GetBlogs + '/' + skipCount, requestOptions)\n        .then(response => response.json())\n        .catch(error => console.log(error));\n}\n\nexport async function GetSiteConfig() {\n    \n    const requestOptions = {\n        method: 'GET',\n        headers: { \n            \"Access-Control-Allow-Origin\": \"*\",\n            \"Access-Control-Allow-Headers\": \"Origin, X-Requested-With, Content-Type, Accept\"\n        }\n    };\n\n    return fetch(BlogAPIEndpoint.GetSiteConfig, requestOptions)\n        .then(response => response.json())\n        .catch(error => console.log(error));\n}\n\n// Az Storage REST API\n\nexport async function BlogGetByIdNew(blogId) {\n    \n    const requestOptions = {\n        method: 'GET',\n        headers: { \n            \"Accept\": \"application/json;odata=nometadata\"\n        }\n    };\n\n    return fetch(AzStorageRestAPI.GetOneBlog + \"&$filter=RowKey%20eq%20'\"+ blogId +\"'\", requestOptions)\n        .then(response => response.json())\n        .catch(error => console.log(error));\n}\n\nexport async function BlogGetAllNew(skipLastBlogId) {\n    \n    const requestOptions = {\n        method: 'GET',\n        headers: {            \n            \"Accept\": \"application/json;odata=nometadata\"\n        }\n    };\n\n    return fetch(AzStorageRestAPI.GetBlogs + \"&$filter=RowKey%20gt%20'\"+ skipLastBlogId +\"'\", requestOptions)\n        .then(response => response.json())\n        .catch(error => console.log(error));\n}\n\nexport async function GetSiteConfigNew() {\n    \n    const requestOptions = {\n        method: 'GET',\n        headers: { \n            \"Accept\": \"application/json;odata=nometadata\"\n        }\n    };\n\n    return fetch(AzStorageRestAPI.GetSiteConfig, requestOptions)\n        .then(response => response.json())\n        .catch(error => console.log(error));\n}"],"sourceRoot":""}